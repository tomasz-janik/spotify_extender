"""
    spotify_extender.request.request_factory

    This module is responsible for building
    requests to Spotify API
"""
from flask import current_app

import config


class RequestFactory:
    """
    Build both requests payloads and headers
    to Spotify API
    """

    @staticmethod
    def build_authorization_header(token: str) -> dict:
        """Build authorization header
        containing authorization token

        :param token: access token used to
        communicate with Spotify API
        :return: dictionary containing
        generated authorization header
        """
        return {'Authorization': f'Bearer {token}'}

    @staticmethod
    def build_content_type_header() -> dict:
        """Build content-type header
        used to communicate with Spotify API

        :return: dictionary containing
        generated content-type header
        """
        return {'Content-Type': 'application/x-www-form-urlencoded'}

    @staticmethod
    def build_refresh_payload(refresh_token: str) -> dict:
        """Build payload required to refresh
        access token

        :param refresh_token: refresh token
        used to refresh access token used to
        communicate with Spotify API
        :return: dictionary containing
        generated payload
        """
        return {
            'grant_type': 'refresh_token',
            'refresh_token': refresh_token
        }

    @staticmethod
    def build_tokens_request(code: str) -> dict:
        """Build request required to get
        access tokens

        :param code: string returned by Spotify while
        callback application to authorize user
        :return: dictionary containing
        generated request
        """
        return {
            'grant_type': 'authorization_code',
            'code': code,
            'redirect_uri': current_app.config.get('REDIRECT_URI'),
        }

    @staticmethod
    def build_authorization_request(state: str) -> dict:
        """Build request required to authorize
        user with Spotify API

        :param state: string generated by
        spotify_extender. Protection from
        cross-site request forgery.
        :return: dictionary containing
        generated request
        """
        return {
            'client_id': current_app.config.get('CLIENT_ID'),
            'response_type': 'code',
            'redirect_uri': current_app.config.get('REDIRECT_URI'),
            'state': state,
            'scope': 'user-read-private user-read-email user-top-read',
            'show_dialog': 'true'
        }

    @staticmethod
    def build_auth() -> tuple:
        """Builds auth used to identify
        spotify_extender application with
        Spotify API

        :return: tuple used to identify spotify_extender
        application
        """
        return config.Config.CLIENT_ID, config.Config.CLIENT_SECRET
